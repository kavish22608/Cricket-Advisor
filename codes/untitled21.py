# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jUP3cYQM9EonEenPzEM3AEFfHSC32ld4
"""

!pip install transformers gradio --quiet

from transformers import pipeline
import gradio as gr
import random

# Initialize the text generation pipeline
generator = pipeline("text-generation", model="distilgpt2")

# Sample Sri Lankan players (expanded lists)
batters = ["Kusal Mendis", "Pathum Nissanka", "Charith Asalanka",
           "Sadeera Samarawickrama", "Dimuth Karunaratne", "Angelo Mathews"]
all_rounders = ["Wanindu Hasaranga", "Dasun Shanaka", "Dhananjaya de Silva",
                "Kamindu Mendis", "Chamika Karunaratne"]
bowlers = ["Maheesh Theekshana", "Dilshan Madushanka", "Kasun Rajitha",
           "Matheesha Pathirana", "Lahiru Kumara", "Dushmantha Chameera",
           "Praveen Jayawickrama"]

def generate_playing_xi():
    """Generate a balanced playing XI"""
    # 4 batters + 3 all-rounders + 4 bowlers = 11 players
    return (random.sample(batters, 4) +
           random.sample(all_rounders, 3) +
           random.sample(bowlers, 4))

def generate_strategy(format, pitch_type, opposition_team):
    """Generate cricket strategy based on inputs"""
    try:
        playing_xi = generate_playing_xi()
        toss_decision = random.choice(["Bat first", "Bowl first"])

        prompt = (
            f"Cricket strategy for {format} match between Sri Lanka and {opposition_team}. "
            f"Pitch is {pitch_type}. Toss decision: {toss_decision}. "
            f"Suggest 3 specific tactics:\n1."
        )

        response = generator(
            prompt,
            max_length=250,
            num_return_sequences=1,
            temperature=0.7,
            truncation=True
        )[0]['generated_text']

        # Extract strategy points
        strategies = []
        for line in response.split('\n'):
            if line.strip().startswith(('1.', '2.', '3.')):
                strategies.append(line.strip())
            if len(strategies) >= 3:
                break

        if len(strategies) < 3:  # Fallback
            strategies = [
                "1. Play aggressive in powerplay overs",
                "2. Use spinners in middle overs",
                "3. Keep fielders in catching positions"
            ]

        report = f"""
🏏 **Cricket Strategy Report**

📋 **Match Details**
• Format: {format}
• Pitch: {pitch_type}
• Opponent: {opposition_team}

🧠 **Playing XI**
""" + "\n".join([f"{i+1}. {player}" for i, player in enumerate(playing_xi)]) + f"""

🎯 **Toss Decision**
• {toss_decision}

📌 **Key Strategies**
""" + "\n".join(strategies[:3]) + """

📎 *AI-generated simulation for demo purposes*
"""
        return report

    except Exception as e:
        return f"Error: {str(e)}"

# Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("# 🏏 AI Cricket Advisor")
    with gr.Row():
        with gr.Column():
            format_in = gr.Radio(["T20", "ODI", "Test"], label="Format", value="T20")
            pitch_in = gr.Dropdown(
                ["Spin-friendly", "Seam-friendly", "Flat", "Dry"],
                label="Pitch Type",
                value="Spin-friendly"
            )
            team_in = gr.Textbox(label="Opponent", value="India")
            btn = gr.Button("Generate", variant="primary")

        with gr.Column():
            output = gr.Markdown()

    btn.click(
        generate_strategy,
        inputs=[format_in, pitch_in, team_in],
        outputs=output
    )

app.launch(share=True)